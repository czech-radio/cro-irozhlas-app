name: main
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.8, 3.9]
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install the package and dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -e ".[lint, test]"
      - name: Check package installation
        run: |
          python -c 'import namespace.package; print(namespace.package.__version__)'
      - name: Execute tests
        run: |
          pytest

# TODO Deploy container or package to registry.

#   deploy:
#     if: ${{ github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/master' }}
#     # since `demo` is all python source code, only a source build is required from one os
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v2
#         with:
#           # Set fetch-depth to 0 so all history is retrieved; this is needed so we get the git tags
#           # which we use for setting the package version (via setuptools-scm).
#           fetch-depth: 0
#       - name: Set up Python
#         uses: actions/setup-python@v2
#         with:
#           python-version: "3.x"
#       - name: Install dependencies
#         run: |
#           python -m pip install --upgrade pip
#           python -m pip install setuptools wheel twine
#       - name: Build and publish
#         env:
#           TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
#           TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
#         run: |
#           python setup.py sdist
#           twine upload dist/* --verbose
#   conda_build:
#     runs-on: ${{ matrix.os }}
#     env:
#       ANACONDA_USER: rtosholdings
#       ANACONDA_TOKEN: ${{ secrets.anaconda_token }}
#     strategy:
#       matrix:
#         os: ['ubuntu-latest', 'windows-latest']
#     steps:
#       - name: Checkout repo
#         uses: actions/checkout@v2
#         env:
#          ACTIONS_ALLOW_UNSECURE_COMMANDS: 'true'
#         with:
#           fetch-depth: 0
#       - name: Setup Miniconda
#         uses: goanpeca/setup-miniconda@v1
#         env:
#          ACTIONS_ALLOW_UNSECURE_COMMANDS: 'true'
#         with:
#           activate-environment: ""
#       - name: Build Package
#         shell: bash -l {0}
#         run: |
#           set -ex
#           conda create -n conda_build python=3.8 conda-build anaconda-client setuptools_scm -y
#           conda activate conda_build
#           export BUILD_VERSION=$(python -c "from setuptools_scm import get_version; print(get_version(version_scheme='post-release'))")
#           mkdir conda_pkgs_output
#           conda build conda_recipe -c ${ANACONDA_USER} --output-folder ./conda_pkgs_output
#           echo "${{ github.event_name }}"
#           echo "${{ github.ref }}"
#       - name: Publish artifacts
#         uses: actions/upload-artifact@v2
#         env:
#          ACTIONS_ALLOW_UNSECURE_COMMANDS: 'true'
#         with:
#           name: packages
#           path: conda_pkgs_output/*/riptable-*.tar.bz2
#           if-no-files-found: "error"
#       - name: Upload to Anaconda
#         if: ${{ github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/master' }}
#         shell: bash -l {0}
#         run: |
#           set -ex
#           conda activate conda_build
#           anaconda --token "${ANACONDA_TOKEN}" upload --label main --user ${ANACONDA_USER} ./conda_pkgs_output/*/riptable-*.tar.bz2